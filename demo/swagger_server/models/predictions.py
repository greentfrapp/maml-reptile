# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.predictions_datapoints import PredictionsDatapoints  # noqa: F401,E501
from swagger_server.models.predictions_losses import PredictionsLosses  # noqa: F401,E501
from swagger_server.models.predictions_predictions import PredictionsPredictions  # noqa: F401,E501
from swagger_server import util


class Predictions(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, datapoints: List[PredictionsDatapoints]=None, evaluation: List[PredictionsDatapoints]=None, losses: PredictionsLosses=None, predictions: PredictionsPredictions=None):  # noqa: E501
        """Predictions - a model defined in Swagger

        :param datapoints: The datapoints of this Predictions.  # noqa: E501
        :type datapoints: List[PredictionsDatapoints]
        :param evaluation: The evaluation of this Predictions.  # noqa: E501
        :type evaluation: List[PredictionsDatapoints]
        :param losses: The losses of this Predictions.  # noqa: E501
        :type losses: PredictionsLosses
        :param predictions: The predictions of this Predictions.  # noqa: E501
        :type predictions: PredictionsPredictions
        """
        self.swagger_types = {
            'datapoints': List[PredictionsDatapoints],
            'evaluation': List[PredictionsDatapoints],
            'losses': PredictionsLosses,
            'predictions': PredictionsPredictions
        }

        self.attribute_map = {
            'datapoints': 'datapoints',
            'evaluation': 'evaluation',
            'losses': 'losses',
            'predictions': 'predictions'
        }

        self._datapoints = datapoints
        self._evaluation = evaluation
        self._losses = losses
        self._predictions = predictions

    @classmethod
    def from_dict(cls, dikt) -> 'Predictions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The predictions of this Predictions.  # noqa: E501
        :rtype: Predictions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datapoints(self) -> List[PredictionsDatapoints]:
        """Gets the datapoints of this Predictions.


        :return: The datapoints of this Predictions.
        :rtype: List[PredictionsDatapoints]
        """
        return self._datapoints

    @datapoints.setter
    def datapoints(self, datapoints: List[PredictionsDatapoints]):
        """Sets the datapoints of this Predictions.


        :param datapoints: The datapoints of this Predictions.
        :type datapoints: List[PredictionsDatapoints]
        """

        self._datapoints = datapoints

    @property
    def evaluation(self) -> List[PredictionsDatapoints]:
        """Gets the evaluation of this Predictions.


        :return: The evaluation of this Predictions.
        :rtype: List[PredictionsDatapoints]
        """
        return self._evaluation

    @evaluation.setter
    def evaluation(self, evaluation: List[PredictionsDatapoints]):
        """Sets the evaluation of this Predictions.


        :param evaluation: The evaluation of this Predictions.
        :type evaluation: List[PredictionsDatapoints]
        """

        self._evaluation = evaluation

    @property
    def losses(self) -> PredictionsLosses:
        """Gets the losses of this Predictions.


        :return: The losses of this Predictions.
        :rtype: PredictionsLosses
        """
        return self._losses

    @losses.setter
    def losses(self, losses: PredictionsLosses):
        """Sets the losses of this Predictions.


        :param losses: The losses of this Predictions.
        :type losses: PredictionsLosses
        """

        self._losses = losses

    @property
    def predictions(self) -> PredictionsPredictions:
        """Gets the predictions of this Predictions.


        :return: The predictions of this Predictions.
        :rtype: PredictionsPredictions
        """
        return self._predictions

    @predictions.setter
    def predictions(self, predictions: PredictionsPredictions):
        """Sets the predictions of this Predictions.


        :param predictions: The predictions of this Predictions.
        :type predictions: PredictionsPredictions
        """

        self._predictions = predictions
